version: 2.1
orbs:
#  node: 'circleci/node:4.1'
  slack: circleci/slack@4.1
  
defaults: &defaults
  docker: 
    - image: cimg/node:13.8.0
#  working_directory: ~/project
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      back-stack:
        type: string
      front-stack:
        type: string   
    steps:
      - run:
          name: Destroy back-end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name <<parameters.back-stack>> \
            --region us-west-2
      - run:
          name: Destroy front-end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name  <<parameters.front-stack>> \
            --region us-west-2

jobs:
  deploy:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          command: npm run deploy
      - slack/notify:
#          channel: ABCXYZ
          event: fail
          template: basic_fail_1

  build-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
              back-stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              front-stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failur

  configure_infrastructure: 
    docker:
      - image: python:3.10.5-alpine3.15
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["3c:f4:1e:07:f1:e8:1e:0f:bd:e3:55:cd:b4:54:8b:1c"]
      - attach_workspace:
          at: ~/
      - run:
          name: install dependencies on ubuntu
          command: |
            apt-get update -y
            apt-get install -y tar gzip
            apk add --update ansible
      - run: 
          name: play playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
#            ansible-playbook -i inventory.txt playbook.yml

workflows:
  # deploy_and_notify:
  #   jobs:
  #     - deploy:
  #         context: slack
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires:
      #       - build-frontend
      # - test-backend:
      #     requires:
      #       - build-backend
      # - scan-frontend:
      #     requires:
      #       - build-frontend
      # - scan-backend:
      #     requires:
      #       - build-backend
      - deploy_infrastructure
      - configure_infrastructure:
          requires:
            - deploy_infrastructure      
