version: 2.1
orbs:
#  node: 'circleci/node:4.1'
  slack: circleci/slack@4.10.1
  
defaults: &defaults
  docker: 
    - image: cimg/node:13.8.0
#  working_directory: ~/project
commands:
  install_aws_cli:
    description: install aws cli on ubuntu
    steps:
      - run:
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_nodejs:
    description: install nodejs 13 on ubuntu
    steps:
      - run:
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt-get install -y nodejs
  install_ansible:
    description: install ansible on ubuntu
    steps:
      - run:
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  notify_on_failure:
    description: notify on slack channel on failure
    steps:
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: destroy-environment
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>> \
            --region us-east-1
            
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            
            aws cloudformation delete-stack \
            --stack-name  udapeople-frontend-<<parameters.workflow_id>> \
            --region us-east-1

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS = 1 ))
            then
              cd ~/project/backend
              npm i
              npm run migration:revert
            fi            

jobs:
  build-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure

  test-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm test
      - notify_on_failure

  scan-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_on_failure

  deploy_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
#            sudo apt-get install tar.gz 
      - run:
          name: Ensure back-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failur

  configure_infrastructure: 
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:9a:ac:c7:0f:24:ae:6e:00:6f:a9:54:f8:57:8d:e1"]
      - attach_workspace:
          at: ~/
      - install_ansible
      - install_nodejs
      - install_aws_cli
#            apt-get install -y tar gzip
      - run: 
          name: play playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    << : *defaults 
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io 
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
            echo migration faild
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install aws cli dependencies
          command: |  
            sudo apt-get update
            sudo apt-get install awscli          
#            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#            . ~/.nvm/nvm.sh
#            nvm install --lts

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-hany1234 --recursive

      - run: 
          name: delete all files from s3 bucket on fail
          command: |
            aws s3 rm s3://udapeople-hany1234 --recursive
          when:
            on_fail                  
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend: 
    docker:
      - image: python:3.10.5-alpine3.15 # cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["98:9a:ac:c7:0f:24:ae:6e:00:6f:a9:54:f8:57:8d:e1"]
      - attach_workspace:
          at: ~/
      - run:
          name: install ansible dependencies on alpine
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            apk add --update npm
            echo npm --version
#            apt-get install -y tar gzip
      - run:
          name: Init Env. Variables
          command: |
            cd backend
            export TYPEORM_HOST="uda-srv1.cxeyfou6uwxt.us-east-1.rds.amazonaws.com"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            echo TYPEORM_HOST="uda-srv1.cxeyfou6uwxt.us-east-1.rds.amazonaws.com" >> ".env"
          
      - run: 
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
            echo "Contents  of the inventory.txt file is ------"
            cat .circleci/ansible/inventory.txt
#            cd .circleci/ansible
#            echo "Contents  of .circleci/ansible/roles/deploy/files are ------"
#            echo "Contents  of the inventory.txt file is ------"
#            cat inventory.txt
      - run: 
          name: play playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install aws cli dependencies
          command: |  
            sudo apt-get update
            sudo apt-get install awscli          
#            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#            . ~/.nvm/nvm.sh
#            nvm install --lts
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                exit 0
            else
                exit 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-hany1234.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"  

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            echo hi
      - run:
          name: Update cloudfront distribution
          command: |
            echo hi
  notify-on-success:
    docker:
      - image: cimg/node:lts
    steps:
      - slack/notify:
          event: pass
          channel: cicd
          template: success_tagged_deploy_1
  
workflows:
  # deploy_and_notify:
  #   jobs:
  #     - deploy:
  #         context: slack
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      # - notify-on-success:
      #     requires:
      #       - test-frontend
      #       - test-backend
      #       - scan-frontend
      #       - scan-backend
      - deploy_infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: master
      - configure_infrastructure:
          requires:
            - deploy_infrastructure
      - run-migrations: 
          requires:
            - configure_infrastructure
      # - deploy-frontend:
      #     requires:
      #       - build-frontend
      #       - configure_infrastructure
      # - deploy-backend: 
      #     requires:
      #       - configure_infrastructure
      # - smoke-test:
      #     requires:
      #       - deploy-backend
      #       - deploy-frontend
