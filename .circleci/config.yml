version: 2.1
orbs:
#  node: 'circleci/node:4.1'
  slack: circleci/slack@4.1
  
defaults: &defaults
  docker: 
    - image: cimg/node:13.8.0
#  working_directory: ~/project
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      back-stack:
        type: string
      front-stack:
        type: string   
    steps:
      - run:
          name: Destroy back-end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name <<parameters.back-stack>> \
            --region us-west-2
      - run:
          name: Destroy front-end environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name  <<parameters.front-stack>> \
            --region us-west-2
      - run:
          name: Delete all files in S3 bucket
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-hany123 --recursive

  revert-migrations:
    description: Revert the last migration
    parameters:
      workflow_id:
        type: string 
      kvdb_bucket:
        type: string
        default: CMcjJfUz81PF2Q36ti3Bbe             
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/<< parameters.kvdb_bucket >>/migration_<< parameters.workflow_id >>)
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi            

jobs:
  deploy:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          command: npm run deploy
      - slack/notify:
#          channel: ABCXYZ
          event: fail
          template: basic_fail_1

  build-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test front-end
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test back-end
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan front-end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  scan-backend:
    << : *defaults
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan back end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical

  deploy_infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
#            sudo apt-get install tar.gz
      - run:
          name: Ensure back-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --tags project=udapeople 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo [web] > .circleci/ansible/inventory.txt
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
              back-stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              front-stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failur

  configure_infrastructure: 
    docker:
      - image: python:3.10.5-alpine3.15
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["98:9a:ac:c7:0f:24:ae:6e:00:6f:a9:54:f8:57:8d:e1"]
#          fingerprints: ["3c:f4:1e:07:f1:e8:1e:0f:bd:e3:55:cd:b4:54:8b:1c"]
      - attach_workspace:
          at: ~/
      - run:
          name: install ansible dependencies on ubuntu
          command: |
            apk add --update ansible
#            apt-get install -y tar gzip
      - run: 
          name: play playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
#            ansible-playbook -i inventory.txt playbook.yml

  run-migrations:
    docker:
      - image: cimg/node:lts  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io 
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
            curl https://kvdb.io/CMcjJfUz81PF2Q36ti3Bbe/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
            echo migration faild
            fi

  deploy-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install aws cli dependencies
          command: |  
            sudo apt-get update
            sudo apt-get install awscli          
#            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#            . ~/.nvm/nvm.sh
#            nvm install --lts

      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-hany123 --recursive

      - run: 
          name: delete all files from s3 bucket on fail
          command: |
            aws s3 rm s3://udapeople-hany123 --recursive
          when:
            on_fail                  
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend: 
    docker:
      - image: python:3.10.5-alpine3.15 # cimg/python:3.10.5-node
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: ["98:9a:ac:c7:0f:24:ae:6e:00:6f:a9:54:f8:57:8d:e1"]
#          fingerprints: ["3c:f4:1e:07:f1:e8:1e:0f:bd:e3:55:cd:b4:54:8b:1c"]
      - attach_workspace:
          at: ~/
      - run:
          name: install ansible dependencies on alpine
          command: |
            apk add --update ansible
            apk add --update nodejs npm
            apk add --update npm
            echo npm --version
#            apt-get install -y tar gzip
      - run: 
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cp ./artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
            echo "Contents  of the inventory.txt file is ------"
            cat .circleci/ansible/inventory.txt
#            cd .circleci/ansible
#            echo "Contents  of .circleci/ansible/roles/deploy/files are ------"
#            echo "Contents  of the inventory.txt file is ------"
#            cat inventory.txt
      - run: 
          name: play playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
              back-stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              front-stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install aws cli dependencies
          command: |  
            sudo apt-get update
            sudo apt-get install awscli          
#            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
#            . ~/.nvm/nvm.sh
#            nvm install --lts
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test
          command: |
            URL="http://udapeople-hany123.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      # - destroy-environment:
      #     back-stack: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      #     front-stack: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
      # - revert-migrations::
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  #   docker:
  #     # Docker image here that supports Ansible
  #   steps:
  #     # Checkout code from git
  #     # Add ssh keys with fingerprint
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           # your code here
  #     - run:
  #         name: Deploy backend
  #         command: |
  #           # your code here
  #     # Here's where you will add some code to rollback on failure  

workflows:
  # deploy_and_notify:
  #   jobs:
  #     - deploy:
  #         context: slack
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy_infrastructure
      - configure_infrastructure:
          requires:
            - deploy_infrastructure
      - run-migrations: 
          requires:
            - build-backend
      - deploy-frontend:
          requires:
            - build-frontend
            - configure_infrastructure
      - deploy-backend: 
          requires:
            - configure_infrastructure
      - smoke-test:
          requires:
            - deploy-backend
            - deploy-frontend
